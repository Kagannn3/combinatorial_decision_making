Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - C:\Users\KAï¿½AN\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\pulp\solverdir\cbc\win\64\cbc.exe C:\Users\KAAN~1\AppData\Local\Temp\4661512c8f4b4c63a5cad4fc56402220-pulp.mps -timeMode elapsed -branch -printingOptions all -solution C:\Users\KAAN~1\AppData\Local\Temp\4661512c8f4b4c63a5cad4fc56402220-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 18 COLUMNS
At line 128 RHS
At line 142 BOUNDS
At line 164 ENDATA
Problem MODEL has 13 rows, 22 columns and 66 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 10.4 - 0.00 seconds
Cgl0004I processed model has 12 rows, 20 columns (19 integer (19 of which binary)) and 61 elements
Cutoff increment increased from 1e-05 to 0.9999
Cbc0038I Initial state - 6 integers unsatisfied sum - 1.06667
Cbc0038I Pass   1: suminf.    0.33333 (2) obj. 11 iterations 5
Cbc0038I Pass   2: suminf.    0.33333 (2) obj. 11 iterations 1
Cbc0038I Pass   3: suminf.    0.90000 (4) obj. 12.7 iterations 6
Cbc0038I Pass   4: suminf.    0.83333 (4) obj. 12.5 iterations 2
Cbc0038I Pass   5: suminf.    1.37500 (3) obj. 12.875 iterations 4
Cbc0038I Pass   6: suminf.    0.80000 (2) obj. 14 iterations 1
Cbc0038I Pass   7: suminf.    0.80000 (2) obj. 14 iterations 2
Cbc0038I Pass   8: suminf.    1.00000 (2) obj. 14 iterations 5
Cbc0038I Pass   9: suminf.    0.66667 (2) obj. 15 iterations 3
Cbc0038I Pass  10: suminf.    0.66667 (2) obj. 15 iterations 2
Cbc0038I Pass  11: suminf.    0.50000 (2) obj. 15.5 iterations 3
Cbc0038I Pass  12: suminf.    0.40000 (2) obj. 15.8 iterations 3
Cbc0038I Pass  13: suminf.    0.40000 (2) obj. 15.8 iterations 0
Cbc0038I Pass  14: suminf.    0.40000 (2) obj. 15.8 iterations 0
Cbc0038I Pass  15: suminf.    0.66667 (2) obj. 17 iterations 4
Cbc0038I Pass  16: suminf.    0.52500 (3) obj. 16.425 iterations 3
Cbc0038I Pass  17: suminf.    1.04167 (3) obj. 14.125 iterations 5
Cbc0038I Pass  18: suminf.    1.04167 (3) obj. 14.125 iterations 2
Cbc0038I Pass  19: suminf.    0.79167 (3) obj. 15.625 iterations 4
Cbc0038I Pass  20: suminf.    0.79167 (3) obj. 15.625 iterations 2
Cbc0038I Pass  21: suminf.    1.46667 (4) obj. 14.4 iterations 6
Cbc0038I Pass  22: suminf.    0.92500 (3) obj. 14.025 iterations 3
Cbc0038I Pass  23: suminf.    1.12500 (3) obj. 14.625 iterations 5
Cbc0038I Pass  24: suminf.    1.12500 (3) obj. 14.625 iterations 1
Cbc0038I Pass  25: suminf.    1.12500 (3) obj. 14.625 iterations 0
Cbc0038I Pass  26: suminf.    1.12500 (3) obj. 14.625 iterations 0
Cbc0038I Pass  27: suminf.    1.25000 (3) obj. 11.75 iterations 5
Cbc0038I Pass  28: suminf.    1.25000 (3) obj. 11.75 iterations 2
Cbc0038I Pass  29: suminf.    1.25000 (3) obj. 11.75 iterations 2
Cbc0038I Pass  30: suminf.    1.13333 (4) obj. 11 iterations 2
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 1 integers at bound fixed and 0 continuous
Cbc0038I Full problem 12 rows 20 columns, reduced to 11 rows 18 columns
Cbc0038I Mini branch and bound improved solution from 1.79769e+308 to 14 (0.01 seconds)
Cbc0038I Round again with cutoff of 12.7401
Cbc0038I Pass  30: suminf.    0.33333 (2) obj. 11 iterations 0
Cbc0038I Pass  31: suminf.    0.33333 (2) obj. 11 iterations 1
Cbc0038I Pass  32: suminf.    0.52958 (5) obj. 12.7401 iterations 4
Cbc0038I Pass  33: suminf.    0.41997 (4) obj. 12.7401 iterations 2
Cbc0038I Pass  34: suminf.    0.25000 (1) obj. 12.25 iterations 5
Cbc0038I Pass  35: suminf.    0.25000 (1) obj. 12.25 iterations 1
Cbc0038I Pass  36: suminf.    0.25000 (1) obj. 12.25 iterations 2
Cbc0038I Pass  37: suminf.    1.17500 (3) obj. 11.475 iterations 7
Cbc0038I Pass  38: suminf.    0.79167 (3) obj. 12.625 iterations 2
Cbc0038I Pass  39: suminf.    0.79167 (3) obj. 12.625 iterations 5
Cbc0038I Pass  40: suminf.    0.52500 (3) obj. 12.375 iterations 14
Cbc0038I Pass  41: suminf.    0.52500 (3) obj. 12.375 iterations 1
Cbc0038I Pass  42: suminf.    0.79167 (3) obj. 12.375 iterations 6
Cbc0038I Pass  43: suminf.    0.79167 (3) obj. 12.375 iterations 4
Cbc0038I Pass  44: suminf.    2.62703 (8) obj. 12.7401 iterations 7
Cbc0038I Pass  45: suminf.    2.01997 (6) obj. 12.7401 iterations 1
Cbc0038I Pass  46: suminf.    1.45300 (5) obj. 12.7401 iterations 5
Cbc0038I Pass  47: suminf.    0.86344 (4) obj. 12.7401 iterations 2
Cbc0038I Pass  48: suminf.    1.13333 (4) obj. 12.7401 iterations 3
Cbc0038I Pass  49: suminf.    0.80000 (3) obj. 12.7401 iterations 2
Cbc0038I Pass  50: suminf.    0.97063 (5) obj. 12.7401 iterations 5
Cbc0038I Pass  51: suminf.    1.92658 (6) obj. 12.7401 iterations 9
Cbc0038I Pass  52: suminf.    1.50661 (6) obj. 12.7401 iterations 3
Cbc0038I Pass  53: suminf.    0.80000 (2) obj. 12.7401 iterations 7
Cbc0038I Pass  54: suminf.    0.80000 (2) obj. 12.7401 iterations 1
Cbc0038I Pass  55: suminf.    1.00000 (2) obj. 12.7401 iterations 5
Cbc0038I Pass  56: suminf.    1.00000 (2) obj. 12.7401 iterations 3
Cbc0038I Pass  57: suminf.    0.50000 (2) obj. 12.7401 iterations 4
Cbc0038I Pass  58: suminf.    0.50000 (2) obj. 12.7401 iterations 2
Cbc0038I Pass  59: suminf.    0.90015 (4) obj. 12.7401 iterations 5
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 0 continuous
Cbc0038I Full problem 12 rows 20 columns, reduced to 12 rows 20 columns
Cbc0038I Mini branch and bound improved solution from 14 to 12 (0.01 seconds)
Cbc0038I Round again with cutoff of 10.8801
Cbc0038I Reduced cost fixing fixed 4 variables on major pass 3
Cbc0038I Pass  59: suminf.    0.40000 (2) obj. 10.8 iterations 1
Cbc0038I Pass  60: suminf.    0.40000 (2) obj. 10.8 iterations 2
Cbc0038I Pass  61: suminf.    1.47565 (5) obj. 10.8801 iterations 3
Cbc0038I Pass  62: suminf.    0.40000 (2) obj. 10.8801 iterations 3
Cbc0038I Pass  63: suminf.    1.57988 (6) obj. 10.8801 iterations 4
Cbc0038I Pass  64: suminf.    0.91303 (4) obj. 10.8801 iterations 3
Cbc0038I Pass  65: suminf.    0.99132 (4) obj. 10.8801 iterations 5
Cbc0038I Pass  66: suminf.    0.99132 (4) obj. 10.8801 iterations 1
Cbc0038I Pass  67: suminf.    0.99132 (4) obj. 10.8801 iterations 1
Cbc0038I Pass  68: suminf.    2.26680 (6) obj. 10.8801 iterations 2
Cbc0038I Pass  69: suminf.    2.57251 (8) obj. 10.8801 iterations 3
Cbc0038I Pass  70: suminf.    1.31053 (7) obj. 10.8801 iterations 2
Cbc0038I Pass  71: suminf.    1.40000 (4) obj. 10.8 iterations 4
Cbc0038I Pass  72: suminf.    0.91107 (5) obj. 10.8801 iterations 2
Cbc0038I Pass  73: suminf.    0.66605 (4) obj. 10.8801 iterations 3
Cbc0038I Pass  74: suminf.    0.66605 (4) obj. 10.8801 iterations 0
Cbc0038I Pass  75: suminf.    1.40000 (4) obj. 10.8801 iterations 2
Cbc0038I Pass  76: suminf.    1.40000 (4) obj. 10.8801 iterations 1
Cbc0038I Pass  77: suminf.    0.91107 (5) obj. 10.8801 iterations 1
Cbc0038I Pass  78: suminf.    0.66605 (4) obj. 10.8801 iterations 3
Cbc0038I Pass  79: suminf.    0.66605 (4) obj. 10.8801 iterations 0
Cbc0038I Pass  80: suminf.    1.40000 (4) obj. 10.8801 iterations 2
Cbc0038I Pass  81: suminf.    1.40000 (4) obj. 10.8801 iterations 1
Cbc0038I Pass  82: suminf.    0.91107 (5) obj. 10.8801 iterations 1
Cbc0038I Pass  83: suminf.    0.66605 (4) obj. 10.8801 iterations 3
Cbc0038I Pass  84: suminf.    0.66605 (4) obj. 10.8801 iterations 0
Cbc0038I Pass  85: suminf.    1.40000 (4) obj. 10.8801 iterations 2
Cbc0038I Pass  86: suminf.    1.40000 (4) obj. 10.8801 iterations 1
Cbc0038I Pass  87: suminf.    0.91107 (5) obj. 10.8801 iterations 1
Cbc0038I Pass  88: suminf.    0.66605 (4) obj. 10.8801 iterations 3
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 5 integers at bound fixed and 0 continuous
Cbc0038I Full problem 12 rows 20 columns, reduced to 8 rows 11 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I After 0.02 seconds - Feasibility pump exiting with objective of 12 - took 0.02 seconds
Cbc0012I Integer solution of 12 found by feasibility pump after 0 iterations and 0 nodes (0.02 seconds)
Cbc0031I 6 added rows had average density of 7.5
Cbc0013I At root node, 19 cuts changed objective from 10.4 to 11.023256 in 1 passes
Cbc0014I Cut generator 0 (Probing) - 2 row cuts average 2.0 elements, 2 column cuts (2 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 3 row cuts average 15.3 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 2 row cuts average 2.5 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 9 row cuts average 8.8 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (ZeroHalf) - 3 row cuts average 6.7 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0001I Search completed - best objective 12, took 0 iterations and 0 nodes (0.02 seconds)
Cbc0035I Maximum depth 0, 1 variables fixed on reduced cost
Cuts at root node changed objective from 10.4 to 11.0233
Probing was tried 1 times and created 4 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
Gomory was tried 1 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Knapsack was tried 1 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Clique was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
MixedIntegerRounding2 was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
FlowCover was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
TwoMirCuts was tried 1 times and created 9 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
ZeroHalf was tried 1 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)

Result - Optimal solution found

Objective value:                12.00000000
Enumerated nodes:               0
Total iterations:               0
Time (CPU seconds):             0.02
Time (Wallclock seconds):       0.02

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.03   (Wallclock seconds):       0.03

{
    "geocode": {
        "time": 0.0496373176574707,
        "optimal": true,
        "obj": 12.0,
        "sol": [
            [
                1,
                4,
                7
            ],
            [
                3,
                6
            ],
            [
                2,
                5
            ]
        ]
    }
}

[Done] exited with code=0 in 0.41 seconds
